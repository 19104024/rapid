#ifndef __WhileParserWrapper__
#define __WhileParserWrapper__

#include "WhileParsingContext.hpp"
#include "WhileScanner.cpp"
#include "WhileParser.hpp"

#include "Program.hpp"

namespace parser
{
    /*
     * Datastructure to hold the result of successfully parsing input.
     */
    class WhileParserResult
    {
    public:
        WhileParserResult(std::unique_ptr<const program::Program> program,
                          std::unique_ptr<const program::ProgramGlobalProperties> programGlobalProperties,
                          std::unordered_map<std::string, std::vector<std::shared_ptr<const program::Variable>>> locationToActiveVars,
                          std::shared_ptr<const logic::Formula> conjecture) : program(std::move(program)), programGlobalProperties(std::move(programGlobalProperties)), locationToActiveVars(locationToActiveVars), conjecture(conjecture){}
        
        std::unique_ptr<const program::Program> program;
        std::unique_ptr<const program::ProgramGlobalProperties> programGlobalProperties;
        std::unordered_map<std::string, std::vector<std::shared_ptr<const program::Variable>>> locationToActiveVars;
        std::shared_ptr<const logic::Formula> conjecture;
        ;
    };
    
    /*
     * main method for parsing input. Internally calls the parser autogenerated by Flex and Bison.
     */
    WhileParserResult parse(std::string inputFile)
    {
        // test readbility, easier than catching exception thrown by parser
        std::ifstream istr(inputFile);
        if (!istr)
        {
            std::cerr << "Unable to read file " << inputFile << std::endl;
            exit(1);
        }
        
        yy_flex_debug = false;
        
        // set parser input to inputFile
        FILE* f = fopen(inputFile.c_str(), "r");
        yy_buffer_state*bp = yy_create_buffer(f, YY_BUF_SIZE );
        yy_create_buffer(f,YY_BUF_SIZE);
        yy_switch_to_buffer(bp);
        
        // generate a context, whose fields are used as in/out-parameters for parsing
        parser::WhileParsingContext context;
        context.inputFile = inputFile;
        
        // parse the input-program into context
        parser::WhileParser parser(context);
        parser.set_debug_level(false);
        parser.parse();
        fclose(f);
        
        if (context.errorFlag)
        {
            exit(1);
        }
        
        assert(context.program);
        assert(context.programGlobalProperties);
        assert(context.conjecture);
        
        util::Output::stream() << util::Output::comment;
        util::Output::stream() << *context.program;
        util::Output::stream() << util::Output::nocomment;
        
        return WhileParserResult(std::move(context.program), std::move(context.programGlobalProperties), std::move(context.locationToActiveVars), std::move(context.conjecture));
    }
}

#endif

